# Author SAI CHARAN
#DATE 20-10-20224

Ingress is used for the external exposure of applications. Services handle load balancing, service discovery, and exposure. However, we are facing two issues with load balancers:
In services, we use a basic load balancer, which operates on a round-robin mechanism.We need to pay for the static public IP of the load balancer. For one load balancer, this is manageable, but if we have 100 or 
more services in load balancer mode, we will need to pay for the IP addresses of each load balancer because they are static. 

Basically, in the past, around 5 to 10 years ago, people primarily used legacy systems before containers, where applications were deployed on servers. In those systems, they had only one load balancer (LB),
and with that single LB, multiple applications could be deployed. It was an enterprise-level load balancer, and only one static IP was required. However, with the introduction of containers, most organizations 
shifted from VMs to containers. Initially, everything seemed fine, but organizations encountered issues with load balancers. This problem was brought to Kubernetes' attention, leading to the introduction of the 
Ingress controller to address this issue.

Ingress controller acts as a load balancer with advanced features like sticky sessions, rate-based routing, path-based routing, domain-based routing, whitelisting, and blacklisting—features that are not natively 
supported by Kubernetes' default load balancers.

The explanation about users needing to create Ingress resources specifying paths, domains, and other routing rules is accurate. Ingress resources define the routing, while the Ingress controller implements them.
Ingress Controller Providers:

It’s correct that different companies develop Ingress controllers, and they provide installation instructions (typically hosted on platforms like GitHub). Users can choose a suitable Ingress controller (such as NGINX, HAProxy, or Traefik) based on their requirements.
One Ingress Controller for Multiple Services:

one Ingress controller can manage multiple services by routing traffic to different services based on the rules defined in the Ingress resources.
Dependency on Ingress Controller:

It’s accurate to say that Ingress resources depend on an Ingress controller. Without the controller, the Ingress resources will not function.
